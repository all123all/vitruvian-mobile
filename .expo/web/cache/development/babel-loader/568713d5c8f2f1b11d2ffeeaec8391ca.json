{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { discoverStyle } from \"./discover.style\";\nimport api from \"../../api\";\nexport default function DiscoverScreen() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      search = _useState2[0],\n      setSearch = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loadgin = _useState6[0],\n      setLoading = _useState6[1];\n\n  useEffect(function () {\n    var controller = new AbortController();\n\n    var getInfo = function getInfo() {\n      var _await$api$get, _data;\n\n      return _regeneratorRuntime.async(function getInfo$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(api.get('Painting/MostViewedPaintings?offset=0&quantity=100&limit=100&randomSeed=123&json=1', {\n                signal: controller.signal\n              }));\n\n            case 3:\n              _await$api$get = _context.sent;\n              _data = _await$api$get.data;\n              setData(_data);\n              _context.next = 15;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n\n              if (!(_context.t0.name === \"AbortError\")) {\n                _context.next = 14;\n                break;\n              }\n\n              console.log('caught cancel');\n              _context.next = 15;\n              break;\n\n            case 14:\n              throw _context.t0;\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    };\n\n    setLoading(false);\n    getInfo();\n    return function () {\n      console.log('unmounting');\n      controller.abort();\n    };\n  }, [api]);\n\n  var itemView = function itemView(_ref) {\n    var item = _ref.item;\n    var images = [{\n      uri: item.image\n    }];\n    return React.createElement(TouchableOpacity, {\n      style: discoverStyle.flatListView,\n      onPress: function onPress() {}\n    }, React.createElement(Text, {\n      style: discoverStyle.flatListText\n    }, item.artistName));\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: discoverStyle.body\n  }, React.createElement(View, {\n    style: discoverStyle.searchBarView\n  }, React.createElement(Icon, {\n    name: \"search\",\n    size: 25,\n    color: \"grey\",\n    style: discoverStyle.searchBarIcon\n  }), React.createElement(TextInput, {\n    placeholder: \"artist, age, movement, style etc...\",\n    style: discoverStyle.searchBarInput,\n    placeholderTextColor: \"#c2c2c2\"\n  })), React.createElement(View, {\n    style: discoverStyle.flatListNest\n  }, React.createElement(FlatList, {\n    data: data,\n    keyExtractor: function keyExtractor(item, index) {\n      return index.toString();\n    },\n    renderItem: itemView,\n    initialNumToRender: 5,\n    maxToRenderPerBatch: 10\n  })));\n}","map":{"version":3,"sources":["/home/arisu/code/vitruvian-mobile/app/screens/discover/discover.screen.js"],"names":["StatusBar","React","useState","useEffect","Icon","discoverStyle","api","DiscoverScreen","search","setSearch","data","setData","loadgin","setLoading","controller","AbortController","getInfo","get","signal","name","console","log","abort","itemView","item","images","uri","image","flatListView","flatListText","artistName","body","searchBarView","searchBarIcon","searchBarInput","flatListNest","index","toString"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, {useState, useEffect} from 'react';\nimport { Text, View, ScrollView, TextInput, FlatList, TouchableOpacity, Image, SafeAreaView} from 'react-native';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport { discoverStyle } from './discover.style';\nimport api from '../../api';\n\nexport default function DiscoverScreen() {\n  const [search, setSearch] = useState('');\n  const [data, setData] = useState({});\n  const [loadgin, setLoading] = useState(true);\n\n  useEffect(()=> {\n    let controller = new AbortController();\n    const getInfo = async () => {\n      try{\n        const {data} = await api.get('Painting/MostViewedPaintings?offset=0&quantity=100&limit=100&randomSeed=123&json=1', {signal: controller.signal});\n        setData(data);\n      }catch(error){\n        if(error.name === \"AbortError\"){\n          console.log('caught cancel');\n        }else{\n          throw error;\n        }\n      }\n    }\n    setLoading(false);\n    getInfo();\n    return () => {\n      console.log('unmounting');\n      controller.abort();\n    };\n  }, [api])\n\n  const itemView = ({item}) => {\n        const images = [{uri: item.image}]\n        return(\n            <TouchableOpacity\n            style={discoverStyle.flatListView}\n            onPress={() => {}}>\n                <Text style={discoverStyle.flatListText}>{item.artistName}</Text>\n            </TouchableOpacity>\n        );\n    }\n\n  return (\n    <SafeAreaView style={discoverStyle.body}>\n        <View style={discoverStyle.searchBarView}>\n          <Icon\n          name=\"search\"\n          size={25}\n          color=\"grey\"\n          style={discoverStyle.searchBarIcon}/>\n          <TextInput\n          placeholder='artist, age, movement, style etc...'\n          style={discoverStyle.searchBarInput}\n          placeholderTextColor=\"#c2c2c2\"\n          />\n        </View>\n        <View style={discoverStyle.flatListNest}>\n          <FlatList\n            data={data}\n            keyExtractor={(item, index) => index.toString()}\n            renderItem={itemView}\n            initialNumToRender={5}\n            maxToRenderPerBatch={10}\n          />\n        </View>\n    </SafeAreaView>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}