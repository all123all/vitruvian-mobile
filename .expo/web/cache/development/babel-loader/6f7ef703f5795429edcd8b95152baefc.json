{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect, Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport ImageViewer from 'react-native-image-zoom-viewer';\nimport { homeStyle } from \"./home.style\";\nimport ImgTest from \"../../../assets/p1.jpg\";\nimport ImgGradient from \"../../../assets/gradient.png\";\nimport api from \"../../api\";\nexport default function HomeScreen(_ref) {\n  var url = _ref.url;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      artistDesc = _useState4[0],\n      setArtistDesc = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var images = [{\n    uri: artistDesc.image\n  }];\n  var imagesZoom = [{\n    url: artistDesc.image,\n    props: {\n      headers: 'This is the title'\n    }\n  }];\n  useEffect(function () {\n    var controller = new AbortController();\n\n    var getInfo = function getInfo() {\n      var _await$api$get, data;\n\n      return _regeneratorRuntime.async(function getInfo$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(api.get('Painting/ImageJson/225189', {\n                signal: controller.signal\n              }));\n\n            case 3:\n              _await$api$get = _context.sent;\n              data = _await$api$get.data;\n              setArtistDesc(data);\n              _context.next = 15;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n\n              if (!(_context.t0.name === \"AbortError\")) {\n                _context.next = 14;\n                break;\n              }\n\n              console.log('caught cancel');\n              _context.next = 15;\n              break;\n\n            case 14:\n              throw _context.t0;\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    };\n\n    setLoading(false);\n    getInfo();\n    return function () {\n      console.log('unmounting');\n      controller.abort();\n    };\n  }, [api]);\n\n  if (loading) {\n    return React.createElement(View, {\n      style: homeStyle.loadingScreen\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: \"#fff\"\n    }));\n  } else {\n    return React.createElement(ScrollView, {\n      style: homeStyle.scrollView\n    }, React.createElement(Modal, {\n      animationType: \"fade\",\n      visible: modalVisible,\n      onRequestClose: function onRequestClose() {\n        setModalVisible(!modalVisible);\n      }\n    }, React.createElement(ImageViewer, {\n      imageUrls: imagesZoom\n    })), React.createElement(View, {\n      style: homeStyle.bodyView\n    }, React.createElement(TouchableOpacity, {\n      style: homeStyle.imgPanel,\n      onPress: function onPress() {\n        return setModalVisible(true);\n      }\n    }, React.createElement(Image, {\n      style: homeStyle.img,\n      source: images\n    })), React.createElement(Text, {\n      style: homeStyle.imgPanelText\n    }, \"Click the image to see full\"), React.createElement(Text, {\n      style: homeStyle.headerTextName\n    }, artistDesc.title), React.createElement(Text, {\n      style: homeStyle.headerTextDesc\n    }, artistDesc.artistName), React.createElement(Text, {\n      style: homeStyle.headerTextInfo\n    }, artistDesc.description)));\n  }\n}","map":{"version":3,"sources":["/home/arisu/code/vitruvian-mobile/app/screens/home/home.screen.js"],"names":["StatusBar","React","useState","useEffect","Component","ImageViewer","homeStyle","ImgTest","ImgGradient","api","HomeScreen","url","modalVisible","setModalVisible","artistDesc","setArtistDesc","loading","setLoading","images","uri","image","imagesZoom","props","headers","controller","AbortController","getInfo","get","signal","data","name","console","log","abort","loadingScreen","scrollView","bodyView","imgPanel","img","imgPanelText","headerTextName","title","headerTextDesc","artistName","headerTextInfo","description"],"mappings":"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","sourcesContent":["//I'll need to make some 'LOADING SCREEN' to not allow the user to see the black screen while the server returns the information\n//Also, note that error: //I'll need to make some 'LOADING SCREEN' to not allow the user to see the black screen while the server returns the information\nimport { StatusBar } from 'expo-status-bar';\nimport React, {useState, useEffect, Component} from 'react';\nimport { Text, View, ScrollView, Modal, Image, Dimensions, TouchableOpacity, ActivityIndicator} from 'react-native';\nimport ImageViewer from 'react-native-image-zoom-viewer';\nimport {homeStyle} from './home.style'\nimport ImgTest from '../../../assets/p1.jpg'\nimport ImgGradient from '../../../assets/gradient.png'\nimport api from '../../api';\n\nexport default function HomeScreen({url}) {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [artistDesc, setArtistDesc] = useState({});\n  const [loading, setLoading] = useState(true);\n  const images = [{\n    uri: artistDesc.image\n  }]\n  const imagesZoom = [{\n    url: artistDesc.image,\n    props: {\n         headers: 'This is the title'\n    }\n  }]\n\n  //The API will use the 'contentId' to pick the artist. In this example the '185307' refers to Jackson Pollock\n  //in this case i'll only need to let the user choose the 'contentId' he prefer\n  useEffect(()=> {\n    let controller = new AbortController();\n    const getInfo = async () => {\n      try{\n        const {data} = await api.get('Painting/ImageJson/225189', {signal: controller.signal});\n        setArtistDesc(data);\n      }catch(error){\n        if(error.name === \"AbortError\"){\n          console.log('caught cancel');\n        }else{\n          throw error;\n        }\n      }\n    }\n    setLoading(false);\n    getInfo();\n    return () => {\n      console.log('unmounting');\n      controller.abort();\n    };\n  }, [api])\n  if(loading){\n    return(\n      <View style={homeStyle.loadingScreen}>\n        <ActivityIndicator\n        size=\"large\"\n        color=\"#fff\"/>\n      </View>\n    )\n  }else{\n    return (\n      <ScrollView style={homeStyle.scrollView}>\n        <Modal\n          animationType='fade'\n          visible={modalVisible}\n          onRequestClose={() => {\n            setModalVisible(!modalVisible)}}>\n          <ImageViewer\n            imageUrls={imagesZoom}\n          />\n        </Modal>        \n        <View style={homeStyle.bodyView}>\n          <TouchableOpacity style={homeStyle.imgPanel}\n          onPress={() => setModalVisible(true)}>\n            <Image\n            style={homeStyle.img}\n            source={images}/>\n          </TouchableOpacity>\n          <Text style={homeStyle.imgPanelText}>Click the image to see full</Text>\n          <Text style={homeStyle.headerTextName}>{artistDesc.title}</Text>\n          <Text style={homeStyle.headerTextDesc}>{artistDesc.artistName}</Text>\n          <Text style={homeStyle.headerTextInfo}>{artistDesc.description}</Text>\n        </View>\n      </ScrollView>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}